const ngrok = require('ngrok');
const fs = require('fs').promises;
const path = require('path');

/**
 * Gestionnaire pour ngrok - d√©marrage automatique et r√©cup√©ration d'URL
 */
class NgrokManager {
    constructor() {
        this.tunnelUrl = null;
        this.isConnected = false;
    }

    /**
     * D√©marrer ngrok et obtenir l'URL publique
     * @param {number} port - Port local √† exposer
     * @param {Object} options - Options ngrok optionnelles
     * @returns {Promise<string>} URL publique du tunnel
     */
    async start(port = 8080, options = {}) {
        try {
            console.log('üöÄ D√©marrage de ngrok...');

            // Options par d√©faut pour ngrok
            const ngrokOptions = {
                addr: port,
                ...options
            };

            // Connecter ngrok
            this.tunnelUrl = await ngrok.connect(ngrokOptions);
            this.isConnected = true;

            console.log(`‚úÖ Tunnel ngrok √©tabli !`);
            console.log(`üåê URL publique: ${this.tunnelUrl}`);
            console.log(`üì° Redirige vers: http://localhost:${port}`);

            return this.tunnelUrl + '/eventsub';
        } catch (error) {
            console.error('‚ùå Erreur lors du d√©marrage de ngrok:', error.message);
            throw error;
        }
    }

    /**
     * Obtenir l'URL du tunnel (si connect√©)
     * @returns {string|null} URL publique ou null si non connect√©
     */
    getUrl() {
        return this.tunnelUrl;
    }

    /**
     * Obtenir l'URL compl√®te du webhook
     * @returns {string|null} URL webhook compl√®te ou null si non connect√©
     */
    getWebhookUrl() {
        return this.tunnelUrl ? `${this.tunnelUrl}/eventsub` : null;
    }

    /**
     * V√©rifier si ngrok est connect√©
     * @returns {boolean} √âtat de la connexion
     */
    isRunning() {
        return this.isConnected;
    }

    /**
     * Obtenir les informations d√©taill√©es des tunnels
     * @returns {Promise<Array>} Liste des tunnels actifs
     */
    async getTunnelInfo() {
        try {
            const api = ngrok.getApi();
            if (!api) {
                return null;
            }
            const tunnels = await api.listTunnels();
            return tunnels;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration infos tunnels:', error.message);
            return null;
        }
    }

    /**
     * Fermer ngrok proprement
     */
    async stop() {
        try {
            if (this.isConnected) {
                console.log('üõë Fermeture de ngrok...');
                await ngrok.disconnect();
                await ngrok.kill();
                this.isConnected = false;
                this.tunnelUrl = null;
                console.log('‚úÖ Ngrok ferm√© proprement');
            }
        } catch (error) {
            console.error('‚ùå Erreur fermeture ngrok:', error.message);
        }
    }

    /**
     * Red√©marrer ngrok (utile en cas de probl√®me)
     * @param {number} port - Port local √† exposer
     * @param {Object} options - Options ngrok optionnelles
     */
    async restart(port = 8080, options = {}) {
        console.log('üîÑ Red√©marrage de ngrok...');
        await this.stop();
        await new Promise(resolve => setTimeout(resolve, 2000)); // Pause de 2s
        return await this.start(port, options);
    }

    /**
     * V√©rifier si ngrok est install√© et accessible
     * @returns {Promise<boolean>} True si ngrok est disponible
     */
    static async checkAvailability() {
        try {
            // Tenter d'importer ngrok sans erreur
            require('ngrok');
            return true;
        } catch (error) {
            return false;
        }
    }
}

module.exports = NgrokManager;
